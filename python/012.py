"""
HIGHLY DIVISIBLE TRIANGULAR NUMBER
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1 3, 7, 21
28: 1, 2, 4, 7, 14, 28
 
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
import math

def count_divisors(n):
    count = 0
    sqrt_n = int(math.sqrt(n))
    
    # check up to sqrt(n) because every divisor below sqrt(n) has a pair above sqrt(n)
    for i in range(1, sqrt_n + 1):
        if n % i == 0:
            # if i divides n evenly, then both i and (n//i) are divisors
            # so count both: i and n/i
            count += 2      # i and n // i
    # if n is a perfect square, sqrt(n) is counted twice - once as i and once as n//i
    if sqrt_n * sqrt_n == n:
        count -= 1          # adjust for overcounting sqrt(n)
    return count

# nth triangle number --> T_n = n(n+1) / 2
def find_triangle_with_divisors(limit):
    n = 1
    while True:
        triangle = n * (n + 1) // 2
        divisors = count_divisors(triangle)
        if divisors > limit:
            return triangle
        n += 1

# find the first triangle number with over 500 divisors
result = find_triangle_with_divisors(500)
print(result)
